import openai
import streamlit as st
from embedding_management import retrieve_relevant_embeddings, chunk_text
from utils import summarize_text, chunk_text  # ‚úÖ Fixed circular import


def modify_campaign_chapter(existing_text, api_key, prompt=None):
    """Modifies a campaign chapter with optional custom changes."""
    client = openai.OpenAI(api_key=api_key)
    messages = [
        {"role": "system", "content": "You are a skilled D&D campaign editor."},
        {"role": "user", "content": f"{prompt if prompt else 'Rewrite this chapter to match past events and world changes:'}\n\n{existing_text}"}
    ]
    response = client.chat.completions.create(model="gpt-4o", messages=messages)

    # Save modified chapter to Dropbox (Obsidian) with correct Markdown formatting
    campaign_content = response.choices[0].message.content.strip()
    markdown_content = f"# Modified Chapter\n\n{campaign_content}"
    
    return response.choices[0].message.content.strip()


# Define your templates for different query types
SPELL_TEMPLATE = """
**Spell Name**: {spell_name_fr_and_eng}
**Level**: {spell_level}
**Effect**: {spell_effect_fr_and_eng}
**Casting Time**: {casting_time}
**Components**: {components_fr_and_eng}
"""

CAMPAIGN_TEMPLATE = """
**Response**: {response}
"""

DEFAULT_TEMPLATE = """
**Response**: {response}
"""


# Function to generate AI response and apply templates
import openai
import streamlit as st
from embedding_management import retrieve_relevant_embeddings, chunk_text

def generate_ai_response(query, api_key, top_k=3, max_tokens=3000, query_type=None):
    """Generate AI response using relevant embeddings from ChromaDB and adapt based on query/page type."""
    
    retrieved_docs = retrieve_relevant_embeddings(query, top_k=top_k, max_tokens=max_tokens, query_type=query_type)
    context = "\n\n".join(retrieved_docs)

    # Handle chunking of context if it's too large
    context_chunks = chunk_text(context, max_tokens=max_tokens)

    client = openai.OpenAI(api_key=api_key)
    responses = []  # ‚úÖ Ensure this list is inside the function

    for chunk in context_chunks:  # ‚úÖ Ensure this is inside the function
        if query_type == "/s":  
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are an AI assistant providing bilingual (French/English) D&D spell details."},
                    {"role": "user", "content": f"Provide this spell's details in both French and English: {query}\n\nContext:\n{chunk}"}
                ]
            )
            spell_data = response.choices[0].message.content.strip()
            formatted_response = SPELL_TEMPLATE.format(
                spell_name_fr_and_eng=query,
                spell_level="3",
                spell_effect_fr_and_eng=spell_data,
                casting_time="1 action",
                components_fr_and_eng="V, S"
            )

        elif query_type == "/c":  
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are an AI assistant for D&D campaigns."},
                    {"role": "user", "content": f"Answer this campaign-related query: {query}\n\nContext:\n{chunk}"}
                ]
            )
            campaign_data = response.choices[0].message.content.strip()
            formatted_response = CAMPAIGN_TEMPLATE.format(response=campaign_data)

        elif query_type == "/r":  
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are an AI assistant for D&D 5e rules."},
                    {"role": "user", "content": f"Answer this DnD 5e Rules query: {query}\n\nContext:\n{chunk}"}
                ]
            )
            rules_data = response.choices[0].message.content.strip()
            formatted_response = DEFAULT_TEMPLATE.format(response=rules_data)  # ‚úÖ Fixed

        else:  
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are an AI assistant."},
                    {"role": "user", "content": f"Answer this query: {query}\n\nContext:\n{chunk}"}
                ]
            )
            default_data = response.choices[0].message.content.strip()
            formatted_response = DEFAULT_TEMPLATE.format(response=default_data)

        responses.append(formatted_response)  # ‚úÖ Ensure this is inside the function

    return " ".join(responses)  # ‚úÖ Ensure this is inside the function


# Add the context to existing functions (e.g., NPC, Shop, Location)
def generate_npc(api_key, occupation, query_type="generate_npc"):
    prompt = f"""
    Cr√©e un PNJ d√©taill√© pour une campagne D&D en respectant les r√®gles de la 5e √©dition.
    Adapte sa classe en fonction de son occupation : {occupation}. Si la classe n'est pas naturellement magique, ne lui attribue pas de sorts.

    üõ°Ô∏è **PNJ G√©n√©r√©**

    **Nom** : [G√©n√©r√©]
    **Race** : [G√©n√©r√©e selon l‚Äôunivers]
    **Classe** : [Adapt√©e selon l‚Äôoccupation]
    **Niveau** : [Appropri√©]

    üõ°Ô∏è **Statistiques :**

    | Statistique | Valeur | Modificateur |
    |------------|--------|-------------|
    | **FOR**    | X      | X           |
    | **DEX**    | X      | X           |
    | **CON**    | X      | X           |
    | **INT**    | X      | X           |
    | **SAG**    | X      | X           |
    | **CHA**    | X      | X           |

    üìñ **Comp√©tences & Modificateurs :**

    | Comp√©tence et Modificateur | Comp√©tence et Modificateur | Comp√©tence et Modificateur |
    |---------------------------|---------------------------|---------------------------|
    | Acrobaties (DEX) : X     | Arcanes (INT) : X        | Athl√©tisme (FOR) : X     |
    | Discr√©tion (DEX) : X     | Dressage (SAG) : X       | Escamotage (DEX) : X     |
    | Histoire (INT) : X       | Intimidation (CHA) : X   | Investigation (INT) : X  |
    | M√©decine (SAG) : X       | Nature (INT) : X        | Perception (SAG) : X     |
    | Persuasion (CHA) : X     | Religion (INT) : X      | Repr√©sentation (CHA) : X |
    | Supercherie (CHA) : X    | Survie (SAG) : X        |                           |

    üèÖ **Capacit√©s et Traits :**
    - [Capacit√©s sp√©ciales li√©es √† la classe et au niveau]
    - [Traits raciaux sp√©cifiques]
    - [Talents ou capacit√©s uniques du PNJ]

    üî• **Sorts connus / Attaques connues (en fonction de la / des classes du NPC) :**

    **Sorts (si applicable, uniquement pour classes magiques) :**
- **Sorts mineurs (utilisation illimit√©e) :**
  - [Liste]
- **Sorts √† emplacements (X/Repos Long) :**
  - **Niveau Y (Y = niveau de sort disponible en fonction du niveau du personnage/NPJ) (X/Repos Long) :** [Liste] 

    **Attaques (si applicable) :**
    - Armes ou autres (pr√©cision) +X : XdX d√©g√¢ts de (type de d√©g√¢ts)

    ‚öîÔ∏è **√âquipement et objets magiques :**
    - [Armures, objets notables, objets magiques (si applicable)]

    üé≠ **Personnalit√© et r√¥le dans l‚Äôunivers :**
    - **Caract√®re et motivations** : [Traits, ambitions et croyances]
    - **Phrase typique ou tic de langage** : [Exemple]
    - **Secrets et conflits internes** : [√âl√©ment cach√© int√©ressant pour les joueurs]

    üìú **Histoire et importance en jeu :**
    - **Biographie courte** : [Son pass√©]
    - **Lien avec la campagne** : [Pourquoi les joueurs pourraient l‚Äôapprocher]

    üó£Ô∏è **Description √† lire aux joueurs :**
    "Un texte immersif que le MJ peut lire √† voix haute, d√©crivant l'apparence, le comportement et l'aura g√©n√©rale du PNJ lorsqu'il est rencontr√© par les joueurs."
    """
    return generate_ai_response(prompt, api_key, query_type=query_type)

def generate_shop(api_key, shop_type="General Store", custom_prompt=None, query_type="/c"):
    prompt = f"""
    Cr√©e une boutique immersive pour une campagne D&D en respectant les r√®gles de la 5e √©dition.
    D√©cris les √©l√©ments suivants :

    **üìú Nom du magasin** : Choisis un nom unique et th√©matique en fonction du type de boutique ({shop_type}).

    **üë§ Propri√©taire** : D√©cris son nom, sa race et sa personnalit√©.

    üó£Ô∏è **Description √† lire aux joueurs :**
    "Un texte immersif que le MJ peut lire √† voix haute, d√©crivant l'apparence, le comportement et l'aura g√©n√©rale du PNJ lorsqu'il est rencontr√© par les joueurs."

    ## üõçÔ∏è **Inventaire Principal (D&D 5e)** :
    - Liste **5 √† 10 objets**, incluant des **objets magiques et non magiques** correspondant au type de boutique ({shop_type}).
    - Utilise les objets **officiels de D&D 5e** et inclut leurs **prix standards**.
    - Pour chaque objet, fournis **une description d√©taill√©e**, en pr√©cisant ses effets et caract√©ristiques.

   ## üîé **Ce qui rend ce magasin int√©ressant** :
    - Ajoute **une ou plusieurs particularit√©s visibles et concr√®tes du magasin** (ex: un comptoir avec des marques profondes comme si quelqu'un y avait frapp√© un √©norme poing, une vitrine avec une seule place vide et une √©tiquette indiquant "R√©serv√©", des marchandises √©tiquet√©es dans une langue inconnue).
    - D√©cris **une interaction directe possible avec cet √©l√©ment** (ex: si les joueurs demandent ce qu‚Äôil y avait sur la place vide de la vitrine, le propri√©taire change de sujet, ou une personne entre soudainement et se met en col√®re de voir l‚Äô√©tag√®re toujours vide).
    - Donne **une explication logique et utilisable en jeu** que le propri√©taire peut fournir **(ou refuser de donner avec une raison claire)** (ex: "Cette marque sur le comptoir ? Un g√©ant en col√®re voulait un remboursement.").
    - Fournis **un √©l√©ment exploitable pour le MJ** (ex: si un joueur touche une arme sp√©cifique, le propri√©taire les observe plus attentivement, ou leur propose imm√©diatement un travail).

        ### üîç **Explication pour le MJ** :
        - D√©crit **ce qui est r√©ellement en train de se passer** derri√®re cette particularit√© du magasin.
        - Explique **l‚Äôorigine ou la cause** (ex: pourquoi cette vitrine est toujours vide, pourquoi l‚Äôenclume runique brille).
        - Indique **les effets concrets en jeu**, si les joueurs interagissent avec cet √©l√©ment.


    ## üîê **Mesures de s√©curit√© et r√©actions en cas de vol** :
    - Pr√©cise **les protections contre le vol** (runes magiques, golems de garde, sorts...) et, si applicable, en d√©crivant les jets de sauvegarde n√©cessaire et les d√©gats.
    - D√©cris **comment le propri√©taire r√©agirait** si un vol √©tait tent√©.

    {f"- Instructions sp√©cifiques : {custom_prompt}" if custom_prompt else ""}
    """
    return generate_ai_response(prompt, api_key, query_type=query_type)

def generate_location(api_key, location_prompt=None, query_type="/c"):
    prompt = f"Cr√©e un lieu immersif pour une campagne D&D en respectant les r√®gles de la 5e √©dition. {location_prompt if location_prompt else ''}"
    return generate_ai_response(prompt, api_key, query_type=query_type)


